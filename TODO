TODO

- Remaining work for next release (1.3.7)
  [ ] refactor panels
      Currently the interface is a bit of a rat's nest (especially the
      controller). The goal is to use better modularization to both simplify
      the codebase and make it possible to use smarter caching to improve
      performance (far too much is done in the ui logic). This work is in
      progress - /init and /util are done and /interface is partly done. Known
      bugs are being fixed while refactoring.
      
      [ ] log panel
        - log to file, allowing non-runlevel events to be saved (provide both
            a continuous option and snapshots taking into account the current
            filter)
        - provide daily dividers (otherwise there's no indicator for the day)
        - log cropping based on time (idea by voidzero)
        - drop duplicate or overly verbose messages (feature request by asn)
      [ ] conf panel
        - move torrc validation into util
        - fetch text via getinfo rather than reading directly?
            conn.get_info("config-text")
  * release prep
    * ask helix about steps for getting a deb and rpm included in the tor repo
    * check performance of this version vs last version (general screen refresh
        times)
    * pylint --indent-string="  " --disable-msg-cat=CR interface/foo.py | less
    * double check __init__.py and README for changes

- Roadmap for version 1.3.8
  [ ] refactor panels
      [ ] conn panel
        - expand client connections and note location in circuit (entry-exit)
        - for clients list all connections to detect what's going through tor
            and what isn't? If not then netstat calls are unnecessary.
        - check family connections to see if they're alive (VERSION cell
            handshake?)
        - fallback when pid or connection querying via pid is unavailable
            List all connections listed both by netstat and the consensus
        - note when connection times are estimates (color?), ie connection
            was established before arm
        - connection uptime to associate inbound/outbound connections?
        - Identify controller connections (if it's arm, vidalia, etc) with
            special detail page for them
        - provide bridge / client country statistics
            Include bridge related data via GETINFO option (feature request
            by waltman and ioerror).
      [ ] controller and popup panels
        - country data for client connections (requested by ioerror)
        - allow arm to resume after restarting tor
            This requires a full move to the torTools controller.
  [ ] setup scripts for arm
      [ ] updater (checks for a new tarball and installs it automatically)
      [ ] look into CAPs to get around permission issues for connection
          listing sudo wrapper for arm to help arm run as the same user as
          tor? Irc suggestions:
            - man capabilities
            - http://www.linuxjournal.com/article/5737

- Bugs
  * util are assuming that tor is running under the default command name
      attempt to determine the command name at runtime (if the pid is available
      then ps can do the mapping)
  * util/torTools.py: effective bandwidth rate/burst measurements don't take
      SETCONF into consideration, blocked on:
      https://trac.torproject.org/projects/tor/ticket/1692
  * log prepopulation fails to limit entries to the current tor instance if
      the file isn't logged to at the NOTICE level. A fix is to use the
      timestamps to see if it belongs to this tor instance. This requires
      tor's uptime - blocked on implementation of the following proposal:
      https://gitweb.torproject.org/tor.git/blob/HEAD:/doc/spec/proposals/173-getinfo-option-expansion.txt
  
  * conf panel:
    * torrc validation doesn't catch if parameters are missing
    * scrolling in the torrc isn't working properly when comments are stripped
        Current method of displaying torrc is pretty stupid (lots of repeated
        work in display loop). When rewritten fixing this bug should be
        trivial.
    * "ExitPolicy" entry in torrc (without path)
        Produces "May 26 22:11:03.484 [warn] The abbreviation 'ExitPolic' is
        deprecated. Please use 'ExitPolicy' instead". This is an error in the
        torrc parsing when only the key is provided.
  
  * conn panel:
    * *never* do reverse dns lookups for first hops (could be resolving via
      tor and hence leaking to the exit)
    * If there's duplicate family entries (and harder case: both nickname and
      fingerprint entries for the same relay) then the duplicate should be
      removed. This is also causing a bad scrolling bug where the cursor can't
      get past the pair of duplicate entries.
    * revise multikey sort of connections
        Currently using a pretty ugly hack. Look at:
        http://www.velocityreviews.com/forums/
          t356461-sorting-a-list-of-objects-by-multiple-attributes.html
        and check for performance difference.
    * replace checks against exit policy with Mike's torctl version
        My version still isn't handling all inputs anyway (still need to handle
        masks, private keyword, and prepended policy). Parse it from the rest
        of the router if too heavy ("TorCtl.Router.will_exit_to instead").
    * avoid hostname lookups of private connections
        Stripped most of them but suspect there might be others (have assertions
        check for this in a debug mode?)
    * connection uptimes shouldn't show fractions of a second
    * connections aren't cleared when control port closes

- Features
  * client mode use cases
    * not sure what sort of information would be useful in the header (to
      replace the orport, fingerprint, flags, etc)
      * one idea by velope:
        "whether you configured a dnsport, transport, etc. and whether they
        were successfully opened. might be nice to know this after the log
        messages might be gone."
        [notice] Opening Socks listener on 127.0.0.1:9050
        [notice] Opening Transparent pf/netfilter listener on 127.0.0.1:9040
        [notice] Opening DNS listener on 127.0.0.1:53
      * rdns and whois lookups
        To avoid disclosing connection data to third parties this needs to be
        an all-or-nothing operation (ie, needs to fetch information on all
        relays or none of them). Plan is something like:
        * add resolving/caching capabilities to fetch information on all relays
          and distil whois entries to just what we care about (hosting provider
          or ISP), by default updating the cache on a daily basis
        * construct tarball and make this available for download rather than
          fetching everything at each client
        * possibly make these archives downloadable from peer relays (note:
          this is a no-go for clients) via torrents or some dirport like scheme
    * special page for client related information, such as ips of our client
      circuits at the exit
    * look at vidalia for ideas
    * need to solicit for ideas on what would be most helpful to clients
  * mac installer
    * Couple of options include macport and dmg...
      * macport (http://guide.macports.org/#development)
        Build-from-source distribution method (like BSD portinstall). This has
        been suggested by several people.
        
      * dmg (http://en.wikipedia.org/wiki/Apple_Disk_Image)
        Most conventional method of software distribution on mac. This is just
        a container (no updating/removal support), but could contain an icon
        for the dock that starts a terminal with arm. This might include a pkg
        installer.
      
      * mpkg (http://pypi.python.org/pypi/bdist_mpkg/)
        Plugin for distutils. Like most mac packaging, this can only run on a
        mac. It also requires setuptools:
        http://www.errorhelp.com/search/details/74034/importerror-no-module-named-setuptools
  * email alerts for changes to the relay's status, similar to tor-weather
    * simple alert if tor shuts down
    * accounting and alerts for if the bandwidth drops to zero
    * daily/weekly/etc alerts for basic status (log output, bandwidth history,
        etc), borrowing from the consensus tracker for some of the formatting
  * check if batch getInfo/getOption calls provide much performance benefit
  * page with details on client circuits, attempting to detect details like
      country, ISP, latency, exit policy for the circuit, traffic, etc
  * attempt to clear controller password from memory
      http://www.codexon.com/posts/clearing-passwords-in-memory-with-python
  * escaping function for uiTools' formatted strings
  * make update rates configurable via the ui
      Also provide option for saving these settings to the config
  * config option to cap resource usage
  * dialog with flag descriptions and other help
  * switch check of ip address validity to regex?
      match = re.match("(\d*)\.(\d*)\.(\d*)\.(\d*)", ip)
      http://wang.yuxuan.org/blog/2009/4/2/python_script_to_convert_from_ip_range_to_ip_mask
  * audit tor connections
      Provide warnings if tor misbehaves, checks possibly including:
        - ensuring ExitPolicyRejectPrivate is being obeyed
        - check that ExitPolicy violations don't occur (not possible yet since
          not all relays aren't identified)
        - check that all connections are properly related to a circuit, for
          instance no outbound connections without a corresponding inbound (not
          possible yet due to being unable to correlate connections to circuits)
  * check file descriptors being accessed by tor to see if they're outside the
      known pattern
  * add page that allows raw control port access
      Start with -t (or -c?) option for commandline-only access with help,
      syntax highlighting, and other spiffy extras
      
      Piggyback on the arm connection, providing something like an interactive
      prompt. In addition, provide:
        - irc like help (ex "/help GETINFO" could provide a summary of getinfo
        commands, partly using the results from "GETINFO info/names")
        - tab completion and up/down populates previous entries
        - warn and get confirmation if command would disrupt arm (for instance
        'SETEVENTS')
        - 'guard' option that restricts to GETINFO only  (start with this)
        - issue sighup reset
  * menu with all torrc options (making them editable/toggleable)
  * Setup wizard for new relays
      Setting the password and such for torrc generation (idea by ioerror)
  * menus?
      http://gnosis.cx/publish/programming/charming_python_6.html
  * look into better supporting hidden services (what could be useful here?)
  * look into providing UPnP support
      This might be provided by tor itself so wait and see...
  * unit tests
      Primarily for util, for instance 'addfstr' woudl be a good candidate.
  * show qos stats
      Take a look at 'linux-tor-prio.sh' to see if any of the stats are 
      available and interesting.
  * handle mutiple tor instances
      First multiple tor instances on the same system, then via remote
      connections too.
  * Investigations of other possible tools:
    * look into additions to the used apis
        - curses (python 2.6 extended?): http://docs.python.org/library/curses.html
        - new control options (like "desc-annotations/id/<OR identity>")?
        - look deeper into TorCtl functions (has a resolve function? hu?)
    * whois lookup for relays? ISP listing?
    * look into what sort of information tcpdump and iptraf provides (probably
        can't use for privacy reasons)
    * vnstat, nload, mrtg, and traceroute

- Ideas (low priority)
  * python 3 compatibility
      Currently blocked on TorCtl support.
  * bundle script that dumps relay stats to stdout
      Django has a small terminal coloring module that could be nice for
      formatting. Could possibly include:
        - desc / ns information for our relay
        - ps / netstat stats like load, uptime, and connection counts, etc
      derived from an idea by StrangeCharm
  * localization
      Abstract strings from code and provide on translation portal. Thus far
      there hasn't been any requests for this.
  * provide option for a consensus page
      Shows full consensus with an interface similar to the connection panel.
      For this Mike's ConsensusTracker would be helpful (though boost the
      startup time by several seconds)
  * follow up on control-spec proposals
      Proposal and related information is available at:
      https://gitweb.torproject.org/tor.git/blob/HEAD:/doc/spec/proposals/172-circ-getinfo-option.txt
      https://gitweb.torproject.org/tor.git/blob/HEAD:/doc/spec/proposals/173-getinfo-option-expansion.txt

