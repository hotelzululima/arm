# startup options
startup.controlPassword
startup.interface.ipAddress 127.0.0.1
startup.interface.port 9051
startup.blindModeEnabled false
startup.events N3

# Seconds between querying information
queries.ps.rate 5
queries.connections.minRate 5
queries.refreshRate.rate 5

# Renders the interface with color if set and the terminal supports it
features.colorInterface true

# If set, arm appends any log messages it reports while running to the given
# log file. This does not take filters into account or include prepopulated
# events.

features.logFile 

# Paremters for the log panel
# ---------------------------
# showDateDividers
#   show borders with dates for entries from previous days
# showDuplicateEntries
#   shows all log entries if true, otherwise collapses similar entries with an
#   indicator for how much is hidden
# entryDuration
#   number of days log entries are kept before being dropped (if zero then
#   they're kept until cropped due to caching limits)
# maxLinesPerEntry
#   max number of lines to display for a single log entry
# prepopulate
#   attempts to read past events from the log file if true
# prepopulateReadLimit
#   maximum entries read from the log file, used to prevent huge log files from
#   causing a slow startup time.
# maxRefreshRate
#   rate limiting (in milliseconds) for drawing the log if updates are made
#   rapidly (for instance, when at the DEBUG runlevel)

features.log.showDateDividers true
features.log.showDuplicateEntries false
features.log.entryDuration 7
features.log.maxLinesPerEntry 4
features.log.prepopulate true
features.log.prepopulateReadLimit 5000
features.log.maxRefreshRate 300

# General graph parameters
# ------------------------
# height
#   height of graphed stats
# maxWidth
#   maximum number of graphed entries
# interval
#   0 -> each second,   1 -> 5 seconds,     2 -> 30 seconds,  3 -> minutely,      
#   4 -> 15 minutes,    5 -> half hour,     6 -> hourly,      7 -> daily
# bound
#   0 -> global maxima, 1 -> local maxima,  2 -> tight
# type
#   0 -> None, 1 -> Bandwidth, 2 -> Connections, 3 -> System Resources
# showIntermediateBounds
#   shows y-axis increments between the top/bottom bounds

features.graph.height 7
features.graph.maxWidth 150
features.graph.interval 0
features.graph.bound 1
features.graph.type 1
features.graph.showIntermediateBounds true

# Parameters for graphing bandwidth stats
# ---------------------------------------
# prepopulate
#   attempts to use tor's state file to prepopulate the bandwidth graph at the
#   15-minute interval (this requires the minimum of a day's worth of uptime)
# transferInBystes
#   shows rate measurments in bytes if true, bits otherwise
# accounting.show
#   provides accounting stats if AccountingMax was set
# accounting.rate
#   seconds between querying accounting stats
# accounting.isTimeLong
#   provides verbose measurements of time if true

features.graph.bw.prepopulate true
features.graph.bw.transferInBytes false
features.graph.bw.accounting.show true
features.graph.bw.accounting.rate 10
features.graph.bw.accounting.isTimeLong false

# Parameters for graphing ps stats
# --------------------------------
# primary/secondaryStat
#   any numeric field provided by the ps command
# cachedOnly
#   determines if the graph should query ps or rely on cached results (this
#   lowers the call volume but limits the graph's granularity)

features.graph.ps.primaryStat %cpu
features.graph.ps.secondaryStat rss
features.graph.ps.cachedOnly true

# Thread pool size for hostname resolutions
# Determines the maximum number of concurrent requests. Upping this to around
# thirty or so seems to be problematic, causing intermittently seizing.

queries.hostnames.poolSize 5

# Method of resolving hostnames
# If true, uses python's internal "socket.gethostbyaddr" to resolve addresses
# rather than the host command. This is ignored if the system's unable to make
# parallel requests. Resolving this way seems to be much slower than host calls
# in practice.

queries.hostnames.useSocketModule false

# Caching parameters
cache.sysCalls.size 600
cache.hostnames.size 700000
cache.hostnames.trimSize 200000
cache.logPanel.size 1000
cache.armLog.size 1000
cache.armLog.trimSize 200

# Runlevels at which arm logs its events
log.refreshRate DEBUG
log.configEntryNotFound NONE
log.configEntryUndefined NOTICE
log.configEntryTypeError NOTICE
log.torCtlPortClosed NOTICE
log.torGetInfo DEBUG
log.torGetConf DEBUG
log.torEventTypeUnrecognized NOTICE
log.sysCallMade DEBUG
log.sysCallCached NONE
log.sysCallFailed INFO
log.sysCallCacheGrowing INFO
log.panelRecreated DEBUG
log.graph.ps.invalidStat WARN
log.graph.ps.abandon WARN
log.graph.bw.prepopulateSuccess NOTICE
log.graph.bw.prepopulateFailure NOTICE
log.logPanel.prepopulateSuccess INFO
log.logPanel.prepopulateFailed WARN
log.logPanel.logFileOpened NOTICE
log.logPanel.logFileWriteFailed ERR
log.connLookupFailed INFO
log.connLookupFailover NOTICE
log.connLookupAbandon WARN
log.connLookupRateGrowing NONE
log.hostnameCacheTrimmed INFO
log.cursesColorSupport INFO

# Snippets from common log messages
# These are static bits of log messages, used to determine when entries with
# dynamic content (hostnames, numbers, etc) are the same. If this matches the
# start of both messages then the entries are flagged as duplicates. If the
# entry begins with an asterisk (*) then it checks if the substrings exist
# anywhere in the messages.
# 
# Examples for the complete messages:
# [BW] READ: 0, WRITTEN: 0
# [NOTICE] We stalled too much while trying to write 150 bytes to address
#          [scrubbed].  If this happens a lot, either something is wrong with
#          your network connection, or something is wrong with theirs. (fd 238,
#          type Directory, state 1, marked at main.c:702).
# [NOTICE] I learned some more directory information, but not enough to build a
#          circuit: We have only 469/2027 usable descriptors.
# [NOTICE] Attempt by %s to open a stream from unknown relay. Closing.
# [WARN] You specified a server "Amunet8" by name, but this name is not
#        registered
# [WARN] I have no descriptor for the router named "Amunet8" in my declared
#        family; I'll use the nickname as is, but this   may confuse clients.
# [WARN] Problem bootstrapping. Stuck at 80%: Connecting to the Tor network.
#        (Network is unreachable; NOROUTE; count 47;    recommendation warn)
# [WARN] 4 unknown, 1 missing key, 3 good, 0 bad, 1 no signature, 4 required
# [ARM_DEBUG] refresh rate: 0.001 seconds
# [ARM_DEBUG] system call: ps -p 2354 -o %cpu,rss,%mem,etime (runtime: 0.02)
# [ARM_DEBUG] system call: netstat -npt | grep 2354/tor (runtime: 0.02)
# [ARM_DEBUG] GETINFO accounting/bytes-left (runtime: 0.0006)

msg.BW READ:
msg.NOTICE We stalled too much while trying to write
msg.NOTICE I learned some more directory information, but not enough to build a circuit
msg.NOTICE Attempt by
msg.WARN You specified a server
msg.WARN I have no descriptor for the router named
msg.WARN Problem bootstrapping. Stuck at
msg.WARN *missing key,
msg.ARM_DEBUG refresh rate:
msg.ARM_DEBUG system call: ps
msg.ARM_DEBUG system call: netstat
msg.ARM_DEBUG GETINFO accounting/bytes
msg.ARM_DEBUG GETINFO accounting/bytes-left
msg.ARM_DEBUG GETINFO accounting/interval-end
msg.ARM_DEBUG GETINFO accounting/hibernating

