# startup options
startup.controlPassword
startup.interface.ipAddress 127.0.0.1
startup.interface.port 9051
startup.blindModeEnabled false
startup.events N3

features.colorInterface true

# log panel parameters
# prepopulate: attempts to read past events from the log file if true
# prepopulateAddLimit: maximum entries added from the log file
# prepopulateReadLimit: maximum entries read from the log file
# 
# Limits are to prevent big log files from causing a slow startup time. For
# instance, if arm's only listening for ERR entries but the log has all
# runlevels then this will add the first <prepopulateAddLimit> ERR entries and
# stop reading after <prepopulateReadLimit> lines.

features.log.prepopulate true
features.log.prepopulateAddLimit 1000
features.log.prepopulateReadLimit 5000

# general graph parameters
# height:   height of graphed stats
# maxWidth: maximum number of graphed entries
# interval: 0 -> each second,  1 -> 5 seconds,  2 -> 30 seconds,
#           3 -> minutely,     4 -> half hour,  5 -> hourly,      6 -> daily
# bound:    0 -> global maxima,        1 -> local maxima, 2 -> tight
# type:     0 -> None, 1 -> Bandwidth, 2 -> Connections,  3 -> System Resources
# frequentRefrsh: updates stats each second if true, otherwise matches interval

features.graph.height 5
features.graph.maxWidth 150
features.graph.interval 0
features.graph.bound 1
features.graph.type 1
features.graph.frequentRefresh true

# ps graph parameters
# primary/secondaryStat: any numeric field provided by the ps command
# cachedOnly: determines if the graph should query ps or rely on cached results
#             (this lowers the call volume but limits the graph's granularity)

features.graph.ps.primaryStat %cpu
features.graph.ps.secondaryStat rss
features.graph.ps.cachedOnly true

features.graph.bw.prepopulate true
features.graph.bw.accounting.show true
features.graph.bw.accounting.rate 10
features.graph.bw.accounting.isTimeLong false

# seconds between querying information
queries.ps.rate 5
queries.connections.minRate 5

# Thread pool size for hostname resolutions (determining the maximum number of
# concurrent requests). Upping this to around thirty or so seems to be
# problematic, causing intermittently seizing.

queries.hostnames.poolSize 5

# Uses python's internal "socket.gethostbyaddr" to resolve addresses rather
# than the host command. This is ignored if the system's unable to make
# parallel requests. Resolving this way seems to be much slower than host calls
# in practice.

queries.hostnames.useSocketModule false

# caching parameters
cache.sysCalls.size 600
cache.hostnames.size 700000
cache.hostnames.trimSize 200000
cache.logPanel.size 1000
cache.armLog.size 1000
cache.armLog.trimSize 200

# runlevels at which to log arm related events
log.refreshRate DEBUG
log.configEntryNotFound NONE
log.configEntryUndefined NOTICE
log.configEntryTypeError NOTICE
log.torCtlPortClosed NOTICE
log.torGetInfo DEBUG
log.torGetConf DEBUG
log.sysCallMade DEBUG
log.sysCallCached NONE
log.sysCallFailed INFO
log.sysCallCacheGrowing INFO
log.panelRecreated DEBUG
log.graph.ps.invalidStat WARN
log.graph.ps.abandon WARN
log.graph.bw.prepopulateSuccess NOTICE
log.graph.bw.prepopulateFailure NOTICE
log.connLookupFailed INFO
log.connLookupFailover NOTICE
log.connLookupAbandon WARN
log.connLookupRateGrowing NONE
log.hostnameCacheTrimmed INFO
log.cursesColorSupport INFO
logging.rate.refreshRate 5

