arm (anonymizing relay monitor) - Terminal status monitor for Tor relays.
Developed by Damian Johnson (www.atagar.com - atagar1@gmail.com)
All code under the GPL v3 (http://www.gnu.org/licenses/gpl.html)
Project page: www.atagar.com/arm

Description:
Command line application for monitoring Tor relays, providing real time status
information such as the current configuration, bandwidth usage, message log,
connections, etc. This uses a curses interface much like 'top' does for system
usage. The application is intended for command-line aficionados, ssh
connections, and anyone stuck with a tty terminal for checking their relay's
status. Releases should be stable so if you manage to make it crash (or have a
feature request) then please let me know!

The project was originally proposed in 2008 by Jacob and Karsten:
  http://archives.seul.org/or/dev/Jan-2008/msg00005.html

An interview by Brenno Winter discussing the project is available at:
  http://www.atagar.com/arm/HFM_INT_0001.mp3

Requirements:
Python 2.5
TorCtl (this is included with arm)
Tor is running with an available control port. This means either...
  ... starting Tor with '--controlport <PORT>'
  ... or including 'ControlPort <PORT>' in your torrc

For full functionality this also needs:
Common *nix commands including: ps, pidof, tail, pwdx, host, netstat, lsof, and
  ulimit
To be ran with the same user as tor to avoid permission issues with netstat,
  lsof, and reading the torrc

This is started via 'arm' (use the '--help' argument for usage).

-------------------------------------------------------------------------------

FAQ:
> Why is it called 'arm'?

Simple - because it makes the command short and memorable. Terminal
applications need to be easy to type (like 'top', 'ssh', etc), and anything
longer is just begging command-line aficionados to alias it down. I chose the
meaning of the acronym ('anonymizing relay monitor') afterward.

> If you're listing connections then what about exit nodes? Won't this include 
people's traffic?

While arm isn't intended to be a sniffer it does provide real time connection
data which, for exit nodes, includes the endpoints being visited through you.
Unfortunately this is pretty unavoidable. The control port doesn't provide a
means of distinguishing those connections and trying to figure it out by
correlating against consensus data has proved pretty inaccurate.

That said, this really isn't much of a concern. For Tor users the real threats
come from things like Wireshark and MITM attacks on their unencrypted traffic.
Simply seeing an unknown individual's endpoints is no great feat in itself.
Just attach netstat to a cron job and voilÃ ! You've got a sniffer that's just
as mighty as arm.

> Is it harmful to share the information provided by arm?

Not really, but it's discouraged. The original plan for arm included a special
emphasis that it wouldn't log any data. The reason is that if a large number of
relay operators published the details of their connections then correlation
attacks could break Tor user's anonymity. Just show some moderation in what you
share and it should be fine.

> Is there any chance that arm will leak data?

Yes - arm is a passive listener with one exception. The second page
(connections) provides the hostnames of Tor relays you're connected to. This
means reverse DNS lookups which, if monitored, could leak your current
connections to an eavesdropper. However, lookups are only made upon request
(when showing connection details or listing connections by hostname) and you
can disable lookups entirely with 'r' - see the page's help for the current
status.

That said, this is not a terribly big whoop. ISPs and anyone sniffing your
connection already has this data - the only difference is that instead of
saying "I am talking to x" you're saying "I'm talking to x, who's x?", meaning
the resolver's also aware of who they are.

> When arm starts it gives "Unable to resolve tor pid, abandoning connection 
listing"... why?

If you're running multiple instances of tor then arm needs to figure out which
pid belongs to the open control port. If it's running as a different user (such
as being in a chroot jail) then it's probably failing due to permission issues.
Arm still runs, just no connection listing or ps stats.

-------------------------------------------------------------------------------

Layout:

./
  arm       - startup script
  
  ChangeLog - revision history
  LICENSE   - copy of the gpl v3
  README    - um... guess you figured this one out
  TODO      - known issues, future plans, etc
  
  screenshot_page1.png
  screenshot_page2.png
  
  init/
    __init__.py
    arm.py    - parses and validates commandline parameters
    prereq.py - checks python version and for required packages
  
  interface/
    __init__.py
    controller.py          - main display loop, handling input and layout
    headerPanel.py         - top of all pages, providing general information
    connResolver.py        - (daemon thread) periodic netstat lookups
    hostnameResolver.py    - (daemon thread) nonblocking reverse dns lookups
    
    
    graphPanel.py          - (page 1) presents graphs for data instances
    bandwidthMonitor.py    - (graph data) tracks tor bandwidth usage
    cpuMemMonitor.py       - (graph data) tracks tor cpu and memory usage
    connCountMonitor.py    - (graph data) tracks number of tor connections
    logPanel.py            - displays tor, arm, and torctl events
    fileDescriptorPopup.py - (popup) displays file descriptors used by tor
    
    connPanel.py           - (page 2) displays information on tor connections
    descriptorPopup.py     - (popup) displays connection descriptor data
    
    confPanel.py           - (page 3) displays torrc and performs validation
  
  util/
    __init__.py
    panel.py   - wrapper for safely working with curses subwindows
    uiTools.py - helper functions for interface

